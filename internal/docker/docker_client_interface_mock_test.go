package docker

// Code generated by http://github.com/gojuno/minimock (3.0.6). DO NOT EDIT.

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/docker/docker/api/types"
	"github.com/gojuno/minimock/v3"
)

// DockerClientInterfaceMock implements dockerClientInterface
type DockerClientInterfaceMock struct {
	t minimock.Tester

	funcContainerList          func(ctx context.Context, options types.ContainerListOptions) (ca1 []types.Container, err error)
	inspectFuncContainerList   func(ctx context.Context, options types.ContainerListOptions)
	afterContainerListCounter  uint64
	beforeContainerListCounter uint64
	ContainerListMock          mDockerClientInterfaceMockContainerList
}

// NewDockerClientInterfaceMock returns a mock for dockerClientInterface
func NewDockerClientInterfaceMock(t minimock.Tester) *DockerClientInterfaceMock {
	m := &DockerClientInterfaceMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.ContainerListMock = mDockerClientInterfaceMockContainerList{mock: m}
	m.ContainerListMock.callArgs = []*DockerClientInterfaceMockContainerListParams{}

	return m
}

type mDockerClientInterfaceMockContainerList struct {
	mock               *DockerClientInterfaceMock
	defaultExpectation *DockerClientInterfaceMockContainerListExpectation
	expectations       []*DockerClientInterfaceMockContainerListExpectation

	callArgs []*DockerClientInterfaceMockContainerListParams
	mutex    sync.RWMutex
}

// DockerClientInterfaceMockContainerListExpectation specifies expectation struct of the dockerClientInterface.ContainerList
type DockerClientInterfaceMockContainerListExpectation struct {
	mock    *DockerClientInterfaceMock
	params  *DockerClientInterfaceMockContainerListParams
	results *DockerClientInterfaceMockContainerListResults
	Counter uint64
}

// DockerClientInterfaceMockContainerListParams contains parameters of the dockerClientInterface.ContainerList
type DockerClientInterfaceMockContainerListParams struct {
	ctx     context.Context
	options types.ContainerListOptions
}

// DockerClientInterfaceMockContainerListResults contains results of the dockerClientInterface.ContainerList
type DockerClientInterfaceMockContainerListResults struct {
	ca1 []types.Container
	err error
}

// Expect sets up expected params for dockerClientInterface.ContainerList
func (mmContainerList *mDockerClientInterfaceMockContainerList) Expect(ctx context.Context, options types.ContainerListOptions) *mDockerClientInterfaceMockContainerList {
	if mmContainerList.mock.funcContainerList != nil {
		mmContainerList.mock.t.Fatalf("DockerClientInterfaceMock.ContainerList mock is already set by Set")
	}

	if mmContainerList.defaultExpectation == nil {
		mmContainerList.defaultExpectation = &DockerClientInterfaceMockContainerListExpectation{}
	}

	mmContainerList.defaultExpectation.params = &DockerClientInterfaceMockContainerListParams{ctx, options}
	for _, e := range mmContainerList.expectations {
		if minimock.Equal(e.params, mmContainerList.defaultExpectation.params) {
			mmContainerList.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmContainerList.defaultExpectation.params)
		}
	}

	return mmContainerList
}

// Inspect accepts an inspector function that has same arguments as the dockerClientInterface.ContainerList
func (mmContainerList *mDockerClientInterfaceMockContainerList) Inspect(f func(ctx context.Context, options types.ContainerListOptions)) *mDockerClientInterfaceMockContainerList {
	if mmContainerList.mock.inspectFuncContainerList != nil {
		mmContainerList.mock.t.Fatalf("Inspect function is already set for DockerClientInterfaceMock.ContainerList")
	}

	mmContainerList.mock.inspectFuncContainerList = f

	return mmContainerList
}

// Return sets up results that will be returned by dockerClientInterface.ContainerList
func (mmContainerList *mDockerClientInterfaceMockContainerList) Return(ca1 []types.Container, err error) *DockerClientInterfaceMock {
	if mmContainerList.mock.funcContainerList != nil {
		mmContainerList.mock.t.Fatalf("DockerClientInterfaceMock.ContainerList mock is already set by Set")
	}

	if mmContainerList.defaultExpectation == nil {
		mmContainerList.defaultExpectation = &DockerClientInterfaceMockContainerListExpectation{mock: mmContainerList.mock}
	}
	mmContainerList.defaultExpectation.results = &DockerClientInterfaceMockContainerListResults{ca1, err}
	return mmContainerList.mock
}

//Set uses given function f to mock the dockerClientInterface.ContainerList method
func (mmContainerList *mDockerClientInterfaceMockContainerList) Set(f func(ctx context.Context, options types.ContainerListOptions) (ca1 []types.Container, err error)) *DockerClientInterfaceMock {
	if mmContainerList.defaultExpectation != nil {
		mmContainerList.mock.t.Fatalf("Default expectation is already set for the dockerClientInterface.ContainerList method")
	}

	if len(mmContainerList.expectations) > 0 {
		mmContainerList.mock.t.Fatalf("Some expectations are already set for the dockerClientInterface.ContainerList method")
	}

	mmContainerList.mock.funcContainerList = f
	return mmContainerList.mock
}

// When sets expectation for the dockerClientInterface.ContainerList which will trigger the result defined by the following
// Then helper
func (mmContainerList *mDockerClientInterfaceMockContainerList) When(ctx context.Context, options types.ContainerListOptions) *DockerClientInterfaceMockContainerListExpectation {
	if mmContainerList.mock.funcContainerList != nil {
		mmContainerList.mock.t.Fatalf("DockerClientInterfaceMock.ContainerList mock is already set by Set")
	}

	expectation := &DockerClientInterfaceMockContainerListExpectation{
		mock:   mmContainerList.mock,
		params: &DockerClientInterfaceMockContainerListParams{ctx, options},
	}
	mmContainerList.expectations = append(mmContainerList.expectations, expectation)
	return expectation
}

// Then sets up dockerClientInterface.ContainerList return parameters for the expectation previously defined by the When method
func (e *DockerClientInterfaceMockContainerListExpectation) Then(ca1 []types.Container, err error) *DockerClientInterfaceMock {
	e.results = &DockerClientInterfaceMockContainerListResults{ca1, err}
	return e.mock
}

// ContainerList implements dockerClientInterface
func (mmContainerList *DockerClientInterfaceMock) ContainerList(ctx context.Context, options types.ContainerListOptions) (ca1 []types.Container, err error) {
	mm_atomic.AddUint64(&mmContainerList.beforeContainerListCounter, 1)
	defer mm_atomic.AddUint64(&mmContainerList.afterContainerListCounter, 1)

	if mmContainerList.inspectFuncContainerList != nil {
		mmContainerList.inspectFuncContainerList(ctx, options)
	}

	mm_params := &DockerClientInterfaceMockContainerListParams{ctx, options}

	// Record call args
	mmContainerList.ContainerListMock.mutex.Lock()
	mmContainerList.ContainerListMock.callArgs = append(mmContainerList.ContainerListMock.callArgs, mm_params)
	mmContainerList.ContainerListMock.mutex.Unlock()

	for _, e := range mmContainerList.ContainerListMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ca1, e.results.err
		}
	}

	if mmContainerList.ContainerListMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmContainerList.ContainerListMock.defaultExpectation.Counter, 1)
		mm_want := mmContainerList.ContainerListMock.defaultExpectation.params
		mm_got := DockerClientInterfaceMockContainerListParams{ctx, options}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmContainerList.t.Errorf("DockerClientInterfaceMock.ContainerList got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmContainerList.ContainerListMock.defaultExpectation.results
		if mm_results == nil {
			mmContainerList.t.Fatal("No results are set for the DockerClientInterfaceMock.ContainerList")
		}
		return (*mm_results).ca1, (*mm_results).err
	}
	if mmContainerList.funcContainerList != nil {
		return mmContainerList.funcContainerList(ctx, options)
	}
	mmContainerList.t.Fatalf("Unexpected call to DockerClientInterfaceMock.ContainerList. %v %v", ctx, options)
	return
}

// ContainerListAfterCounter returns a count of finished DockerClientInterfaceMock.ContainerList invocations
func (mmContainerList *DockerClientInterfaceMock) ContainerListAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmContainerList.afterContainerListCounter)
}

// ContainerListBeforeCounter returns a count of DockerClientInterfaceMock.ContainerList invocations
func (mmContainerList *DockerClientInterfaceMock) ContainerListBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmContainerList.beforeContainerListCounter)
}

// Calls returns a list of arguments used in each call to DockerClientInterfaceMock.ContainerList.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmContainerList *mDockerClientInterfaceMockContainerList) Calls() []*DockerClientInterfaceMockContainerListParams {
	mmContainerList.mutex.RLock()

	argCopy := make([]*DockerClientInterfaceMockContainerListParams, len(mmContainerList.callArgs))
	copy(argCopy, mmContainerList.callArgs)

	mmContainerList.mutex.RUnlock()

	return argCopy
}

// MinimockContainerListDone returns true if the count of the ContainerList invocations corresponds
// the number of defined expectations
func (m *DockerClientInterfaceMock) MinimockContainerListDone() bool {
	for _, e := range m.ContainerListMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ContainerListMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterContainerListCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcContainerList != nil && mm_atomic.LoadUint64(&m.afterContainerListCounter) < 1 {
		return false
	}
	return true
}

// MinimockContainerListInspect logs each unmet expectation
func (m *DockerClientInterfaceMock) MinimockContainerListInspect() {
	for _, e := range m.ContainerListMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to DockerClientInterfaceMock.ContainerList with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ContainerListMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterContainerListCounter) < 1 {
		if m.ContainerListMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to DockerClientInterfaceMock.ContainerList")
		} else {
			m.t.Errorf("Expected call to DockerClientInterfaceMock.ContainerList with params: %#v", *m.ContainerListMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcContainerList != nil && mm_atomic.LoadUint64(&m.afterContainerListCounter) < 1 {
		m.t.Error("Expected call to DockerClientInterfaceMock.ContainerList")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *DockerClientInterfaceMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockContainerListInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *DockerClientInterfaceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *DockerClientInterfaceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockContainerListDone()
}
