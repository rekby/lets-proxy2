package cert_manager

// Code generated by http://github.com/gojuno/minimock (3.0.6). DO NOT EDIT.

//go:generate minimock -i github.com/rekby/lets-proxy2/internal/cert_manager.AcmeClientManager -o ./acme_client_manager_mock_test.go

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"golang.org/x/crypto/acme"
)

// AcmeClientManagerMock implements AcmeClientManager
type AcmeClientManagerMock struct {
	t minimock.Tester

	funcClose          func() (err error)
	inspectFuncClose   func()
	afterCloseCounter  uint64
	beforeCloseCounter uint64
	CloseMock          mAcmeClientManagerMockClose

	funcGetClient          func(ctx context.Context) (cp1 *acme.Client, err error)
	inspectFuncGetClient   func(ctx context.Context)
	afterGetClientCounter  uint64
	beforeGetClientCounter uint64
	GetClientMock          mAcmeClientManagerMockGetClient
}

// NewAcmeClientManagerMock returns a mock for AcmeClientManager
func NewAcmeClientManagerMock(t minimock.Tester) *AcmeClientManagerMock {
	m := &AcmeClientManagerMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CloseMock = mAcmeClientManagerMockClose{mock: m}

	m.GetClientMock = mAcmeClientManagerMockGetClient{mock: m}
	m.GetClientMock.callArgs = []*AcmeClientManagerMockGetClientParams{}

	return m
}

type mAcmeClientManagerMockClose struct {
	mock               *AcmeClientManagerMock
	defaultExpectation *AcmeClientManagerMockCloseExpectation
	expectations       []*AcmeClientManagerMockCloseExpectation
}

// AcmeClientManagerMockCloseExpectation specifies expectation struct of the AcmeClientManager.Close
type AcmeClientManagerMockCloseExpectation struct {
	mock *AcmeClientManagerMock

	results *AcmeClientManagerMockCloseResults
	Counter uint64
}

// AcmeClientManagerMockCloseResults contains results of the AcmeClientManager.Close
type AcmeClientManagerMockCloseResults struct {
	err error
}

// Expect sets up expected params for AcmeClientManager.Close
func (mmClose *mAcmeClientManagerMockClose) Expect() *mAcmeClientManagerMockClose {
	if mmClose.mock.funcClose != nil {
		mmClose.mock.t.Fatalf("AcmeClientManagerMock.Close mock is already set by Set")
	}

	if mmClose.defaultExpectation == nil {
		mmClose.defaultExpectation = &AcmeClientManagerMockCloseExpectation{}
	}

	return mmClose
}

// Inspect accepts an inspector function that has same arguments as the AcmeClientManager.Close
func (mmClose *mAcmeClientManagerMockClose) Inspect(f func()) *mAcmeClientManagerMockClose {
	if mmClose.mock.inspectFuncClose != nil {
		mmClose.mock.t.Fatalf("Inspect function is already set for AcmeClientManagerMock.Close")
	}

	mmClose.mock.inspectFuncClose = f

	return mmClose
}

// Return sets up results that will be returned by AcmeClientManager.Close
func (mmClose *mAcmeClientManagerMockClose) Return(err error) *AcmeClientManagerMock {
	if mmClose.mock.funcClose != nil {
		mmClose.mock.t.Fatalf("AcmeClientManagerMock.Close mock is already set by Set")
	}

	if mmClose.defaultExpectation == nil {
		mmClose.defaultExpectation = &AcmeClientManagerMockCloseExpectation{mock: mmClose.mock}
	}
	mmClose.defaultExpectation.results = &AcmeClientManagerMockCloseResults{err}
	return mmClose.mock
}

//Set uses given function f to mock the AcmeClientManager.Close method
func (mmClose *mAcmeClientManagerMockClose) Set(f func() (err error)) *AcmeClientManagerMock {
	if mmClose.defaultExpectation != nil {
		mmClose.mock.t.Fatalf("Default expectation is already set for the AcmeClientManager.Close method")
	}

	if len(mmClose.expectations) > 0 {
		mmClose.mock.t.Fatalf("Some expectations are already set for the AcmeClientManager.Close method")
	}

	mmClose.mock.funcClose = f
	return mmClose.mock
}

// Close implements AcmeClientManager
func (mmClose *AcmeClientManagerMock) Close() (err error) {
	mm_atomic.AddUint64(&mmClose.beforeCloseCounter, 1)
	defer mm_atomic.AddUint64(&mmClose.afterCloseCounter, 1)

	if mmClose.inspectFuncClose != nil {
		mmClose.inspectFuncClose()
	}

	if mmClose.CloseMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmClose.CloseMock.defaultExpectation.Counter, 1)

		mm_results := mmClose.CloseMock.defaultExpectation.results
		if mm_results == nil {
			mmClose.t.Fatal("No results are set for the AcmeClientManagerMock.Close")
		}
		return (*mm_results).err
	}
	if mmClose.funcClose != nil {
		return mmClose.funcClose()
	}
	mmClose.t.Fatalf("Unexpected call to AcmeClientManagerMock.Close.")
	return
}

// CloseAfterCounter returns a count of finished AcmeClientManagerMock.Close invocations
func (mmClose *AcmeClientManagerMock) CloseAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmClose.afterCloseCounter)
}

// CloseBeforeCounter returns a count of AcmeClientManagerMock.Close invocations
func (mmClose *AcmeClientManagerMock) CloseBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmClose.beforeCloseCounter)
}

// MinimockCloseDone returns true if the count of the Close invocations corresponds
// the number of defined expectations
func (m *AcmeClientManagerMock) MinimockCloseDone() bool {
	for _, e := range m.CloseMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CloseMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCloseCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcClose != nil && mm_atomic.LoadUint64(&m.afterCloseCounter) < 1 {
		return false
	}
	return true
}

// MinimockCloseInspect logs each unmet expectation
func (m *AcmeClientManagerMock) MinimockCloseInspect() {
	for _, e := range m.CloseMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to AcmeClientManagerMock.Close")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CloseMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCloseCounter) < 1 {
		m.t.Error("Expected call to AcmeClientManagerMock.Close")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcClose != nil && mm_atomic.LoadUint64(&m.afterCloseCounter) < 1 {
		m.t.Error("Expected call to AcmeClientManagerMock.Close")
	}
}

type mAcmeClientManagerMockGetClient struct {
	mock               *AcmeClientManagerMock
	defaultExpectation *AcmeClientManagerMockGetClientExpectation
	expectations       []*AcmeClientManagerMockGetClientExpectation

	callArgs []*AcmeClientManagerMockGetClientParams
	mutex    sync.RWMutex
}

// AcmeClientManagerMockGetClientExpectation specifies expectation struct of the AcmeClientManager.GetClient
type AcmeClientManagerMockGetClientExpectation struct {
	mock    *AcmeClientManagerMock
	params  *AcmeClientManagerMockGetClientParams
	results *AcmeClientManagerMockGetClientResults
	Counter uint64
}

// AcmeClientManagerMockGetClientParams contains parameters of the AcmeClientManager.GetClient
type AcmeClientManagerMockGetClientParams struct {
	ctx context.Context
}

// AcmeClientManagerMockGetClientResults contains results of the AcmeClientManager.GetClient
type AcmeClientManagerMockGetClientResults struct {
	cp1 *acme.Client
	err error
}

// Expect sets up expected params for AcmeClientManager.GetClient
func (mmGetClient *mAcmeClientManagerMockGetClient) Expect(ctx context.Context) *mAcmeClientManagerMockGetClient {
	if mmGetClient.mock.funcGetClient != nil {
		mmGetClient.mock.t.Fatalf("AcmeClientManagerMock.GetClient mock is already set by Set")
	}

	if mmGetClient.defaultExpectation == nil {
		mmGetClient.defaultExpectation = &AcmeClientManagerMockGetClientExpectation{}
	}

	mmGetClient.defaultExpectation.params = &AcmeClientManagerMockGetClientParams{ctx}
	for _, e := range mmGetClient.expectations {
		if minimock.Equal(e.params, mmGetClient.defaultExpectation.params) {
			mmGetClient.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetClient.defaultExpectation.params)
		}
	}

	return mmGetClient
}

// Inspect accepts an inspector function that has same arguments as the AcmeClientManager.GetClient
func (mmGetClient *mAcmeClientManagerMockGetClient) Inspect(f func(ctx context.Context)) *mAcmeClientManagerMockGetClient {
	if mmGetClient.mock.inspectFuncGetClient != nil {
		mmGetClient.mock.t.Fatalf("Inspect function is already set for AcmeClientManagerMock.GetClient")
	}

	mmGetClient.mock.inspectFuncGetClient = f

	return mmGetClient
}

// Return sets up results that will be returned by AcmeClientManager.GetClient
func (mmGetClient *mAcmeClientManagerMockGetClient) Return(cp1 *acme.Client, err error) *AcmeClientManagerMock {
	if mmGetClient.mock.funcGetClient != nil {
		mmGetClient.mock.t.Fatalf("AcmeClientManagerMock.GetClient mock is already set by Set")
	}

	if mmGetClient.defaultExpectation == nil {
		mmGetClient.defaultExpectation = &AcmeClientManagerMockGetClientExpectation{mock: mmGetClient.mock}
	}
	mmGetClient.defaultExpectation.results = &AcmeClientManagerMockGetClientResults{cp1, err}
	return mmGetClient.mock
}

//Set uses given function f to mock the AcmeClientManager.GetClient method
func (mmGetClient *mAcmeClientManagerMockGetClient) Set(f func(ctx context.Context) (cp1 *acme.Client, err error)) *AcmeClientManagerMock {
	if mmGetClient.defaultExpectation != nil {
		mmGetClient.mock.t.Fatalf("Default expectation is already set for the AcmeClientManager.GetClient method")
	}

	if len(mmGetClient.expectations) > 0 {
		mmGetClient.mock.t.Fatalf("Some expectations are already set for the AcmeClientManager.GetClient method")
	}

	mmGetClient.mock.funcGetClient = f
	return mmGetClient.mock
}

// When sets expectation for the AcmeClientManager.GetClient which will trigger the result defined by the following
// Then helper
func (mmGetClient *mAcmeClientManagerMockGetClient) When(ctx context.Context) *AcmeClientManagerMockGetClientExpectation {
	if mmGetClient.mock.funcGetClient != nil {
		mmGetClient.mock.t.Fatalf("AcmeClientManagerMock.GetClient mock is already set by Set")
	}

	expectation := &AcmeClientManagerMockGetClientExpectation{
		mock:   mmGetClient.mock,
		params: &AcmeClientManagerMockGetClientParams{ctx},
	}
	mmGetClient.expectations = append(mmGetClient.expectations, expectation)
	return expectation
}

// Then sets up AcmeClientManager.GetClient return parameters for the expectation previously defined by the When method
func (e *AcmeClientManagerMockGetClientExpectation) Then(cp1 *acme.Client, err error) *AcmeClientManagerMock {
	e.results = &AcmeClientManagerMockGetClientResults{cp1, err}
	return e.mock
}

// GetClient implements AcmeClientManager
func (mmGetClient *AcmeClientManagerMock) GetClient(ctx context.Context) (cp1 *acme.Client, err error) {
	mm_atomic.AddUint64(&mmGetClient.beforeGetClientCounter, 1)
	defer mm_atomic.AddUint64(&mmGetClient.afterGetClientCounter, 1)

	if mmGetClient.inspectFuncGetClient != nil {
		mmGetClient.inspectFuncGetClient(ctx)
	}

	mm_params := &AcmeClientManagerMockGetClientParams{ctx}

	// Record call args
	mmGetClient.GetClientMock.mutex.Lock()
	mmGetClient.GetClientMock.callArgs = append(mmGetClient.GetClientMock.callArgs, mm_params)
	mmGetClient.GetClientMock.mutex.Unlock()

	for _, e := range mmGetClient.GetClientMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.cp1, e.results.err
		}
	}

	if mmGetClient.GetClientMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetClient.GetClientMock.defaultExpectation.Counter, 1)
		mm_want := mmGetClient.GetClientMock.defaultExpectation.params
		mm_got := AcmeClientManagerMockGetClientParams{ctx}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetClient.t.Errorf("AcmeClientManagerMock.GetClient got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetClient.GetClientMock.defaultExpectation.results
		if mm_results == nil {
			mmGetClient.t.Fatal("No results are set for the AcmeClientManagerMock.GetClient")
		}
		return (*mm_results).cp1, (*mm_results).err
	}
	if mmGetClient.funcGetClient != nil {
		return mmGetClient.funcGetClient(ctx)
	}
	mmGetClient.t.Fatalf("Unexpected call to AcmeClientManagerMock.GetClient. %v", ctx)
	return
}

// GetClientAfterCounter returns a count of finished AcmeClientManagerMock.GetClient invocations
func (mmGetClient *AcmeClientManagerMock) GetClientAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetClient.afterGetClientCounter)
}

// GetClientBeforeCounter returns a count of AcmeClientManagerMock.GetClient invocations
func (mmGetClient *AcmeClientManagerMock) GetClientBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetClient.beforeGetClientCounter)
}

// Calls returns a list of arguments used in each call to AcmeClientManagerMock.GetClient.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetClient *mAcmeClientManagerMockGetClient) Calls() []*AcmeClientManagerMockGetClientParams {
	mmGetClient.mutex.RLock()

	argCopy := make([]*AcmeClientManagerMockGetClientParams, len(mmGetClient.callArgs))
	copy(argCopy, mmGetClient.callArgs)

	mmGetClient.mutex.RUnlock()

	return argCopy
}

// MinimockGetClientDone returns true if the count of the GetClient invocations corresponds
// the number of defined expectations
func (m *AcmeClientManagerMock) MinimockGetClientDone() bool {
	for _, e := range m.GetClientMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetClientMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetClientCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetClient != nil && mm_atomic.LoadUint64(&m.afterGetClientCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetClientInspect logs each unmet expectation
func (m *AcmeClientManagerMock) MinimockGetClientInspect() {
	for _, e := range m.GetClientMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AcmeClientManagerMock.GetClient with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetClientMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetClientCounter) < 1 {
		if m.GetClientMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to AcmeClientManagerMock.GetClient")
		} else {
			m.t.Errorf("Expected call to AcmeClientManagerMock.GetClient with params: %#v", *m.GetClientMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetClient != nil && mm_atomic.LoadUint64(&m.afterGetClientCounter) < 1 {
		m.t.Error("Expected call to AcmeClientManagerMock.GetClient")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *AcmeClientManagerMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockCloseInspect()

		m.MinimockGetClientInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *AcmeClientManagerMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *AcmeClientManagerMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCloseDone() &&
		m.MinimockGetClientDone()
}
