## ATTENTION
# it is example file only. It builtin in binary and don't read from file system.
# changes in config_default.toml have no real effect.

[General]

# Seconds for issue every certificate. Cancel issue and return error if timeout.
IssueTimeout = 300

# Path to dir, which will store state and certificates
StorageDir = "storage"

# Store .json info with certificate metadata near certificate.
StoreJSONMetadata = true

# Subdomains, auto-included within certificate of main domain name
Subdomains = ["www."]

# Directory url of acme server.
#Test server: https://acme-staging-v02.api.letsencrypt.org/directory
AcmeServer = "https://acme-v02.api.letsencrypt.org/directory"

# Include other config files
# It support glob syntax
# If it has path without template - the file must exist.
# For allow optional include file - it can contain some glob symbol
# Included configs merge with current readed state.
# example=[ "config.tom[l]" ]
IncludeConfigs = []

# For prevent infinite loop and consume all memory if cycle in includes
MaxConfigFilesRead = 10000

AllowRSACert = true
AllowECDSACert = true
AllowInsecureTLSChipers = false

# Available: 1.0, 1.1, 1.2, 1.3
MinTLSVersion="1.2"

[Log]
EnableLogToFile = true
EnableLogToStdErr = true

# verbose level of log, one of: debug, info, warning, error, fatal
LogLevel = "info"

# Enable write info about every http request (but write info about connections if need by level)
EnableAccessLog = true

# Enable self log rotating
EnableRotate = true

# Enable developer mode: more stacktraces and panic (stop program) on some internal errors.
DeveloperMode = false

# Path to log file
File = "lets-proxy.log"

# Rotate log if current file size more than X MB
RotateBySizeMB = 100

# Compress old log with gzip after rotate
CompressRotated = false

# Delete old backups after X days. 0 for disable.
MaxDays = 10

# Delete old backups if old file number more then X. 0 for disable.
MaxCount = 10

[Proxy]

# Default rule of select destination address.
# It can be: IP (with default port 80), :Port (default - same IP as receive connection), IPv4:Port or [IPv6]:Port
# Must define port force if HTTPSBackend is true
DefaultTarget = ":80"

# After KeepAliveTimeoutSeconds of inactive incoming connection will close.
KeepAliveTimeoutSeconds = 900

# Array of '-' separated pairs or IP:Port. For example:
# [
#   "1.2.3.4:443-2.2.2.2:1234",
#   "3.3.3.3:333-[::1]:94"
# "]
# Mean: connections, accepted on 1.2.3.4:443 send to server 2.2.2.2:1234
# and connections accepted on 3.3.3.3:333 send to ipv6 ::1 port 94
TargetMap = []

# Array of colon separated HeaderName:HeaderValue for add to request for backend. {{Value}} is special forms, which can
# internally parsing. Now it support only special values:
# {{CONNECTION_ID}} - Id of accepted connection, generated by lets-proxy
# {{HTTP_PROTO}} - set to http/https dependence incoming connections handled
# {{SOURCE_IP}} - Remote IP of incoming connection
# {{SOURCE_PORT}} - Remote port of incoming connection
# {{SOURCE_IP}}:{{SOURCE_PORT}} - Remote IP:Port of incoming connection.
# Now it accepted only this special values, which must be exaxlty equal to examples. All other values send as is.
# But it can change and extend in future. Doesn't use {{...}} as own values.
# Example:
# ["IP:{{SOURCE_IP}}", "Proxy:lets-proxy", "Protocol:{{HTTP_PROTO}}" ]
Headers = [ "X-Forwarded-Proto:{{HTTP_PROTO}}", "X-Forwarded-For:{{SOURCE_IP}}" ]

# Use https requests to backend instead of http
HTTPSBackend = false

# Ignore backend https certificate validations if HTTPSBackend is true
HTTPSBackendIgnoreCert = true

[CheckDomains]

# Allow domain if it resolver for one of public IPs of this server.
IPSelf = true

# How detect public ips of the server.
# it use if IPSelf is true
# auto | local | aws  | yandex
# auto - best effort for detect IP. Algoritm may change from time to time.
#        it good for default.
# bind - detect public IP binded to local interfaces
# aws - detect public IPs by query to AWS EC2 metadata
# external - detect self ip by request to external server IPSelfExternalDetector
# yandex - detect public IPs by query to Yandex cloud metadata (now alias for aws)
IPSelfDetectMethod = "auto"

# Server for use as external detector of server IP (need for detect IP behind NAT
# Server must response as plain text IP address.
# For every detect lets-proxy make two requests: by ipv4 and ipv6 networks
IPSelfExternalDetectorURL="http://ifconfig.io/ip"

# Allow domain if it resolver for one of the ips.
IPWhiteList = ""

# Regexp in golang syntax of blacklisted domain for issue certificate.
# This list overrided by whitelist.
BlackList = ""

# Regexp in golang syntax of whitelist domains for issue certificate.
# Whitelist need for allow part of domains, which excluded by blacklist.
#
WhiteList = ""

# Comma separated dns server, used for resolve ip:port address of domains while check it.
# if empty - use system dns resolver (usually include hosts file, cache, etc)
# if set - use direct dns queries for servers, without self cache.
# if set more, than one dns server - send queries in parallel to all servers.
# error results from part of servers - ignore. Need minimum one answer.
# if different dns servers return different ip addresses - all of them use for check
# Example: "8.8.8.8:53,1.1.1.1:53,77.88.8.8:53,[2a02:6b8::feed:0ff]:53,[2001:4860:4860::8888]:53"
Resolver = ""



[Listen]

# Bind addresses for TLS listeners
TLSAddresses = [":443"]

# Bind addresses without TLS secure (for HTTP reverse proxy and http-01 validation without redirect to https)
TCPAddresses = []

[DockerRouter]
# Default docker
Enable = false

# Port of target docker container
DefaultHttpPort = 80

LabelDomain = "lets-proxy.domain"

[Metrics]
# Enable metrics in prometheous formath by http.
Enable = false

# Bind addresses for get by https
TLSAddresses = [ "[::]:62101" ]

# Bind addresses without TLS secure (for HTTP reverse proxy and http-01 validation without redirect to https)
TCPAddresses = [ "[::]:62100" ]

# IP networks for allow to get metrics.
# Default - allow from all.
# Example:
# [ "1.2.3.4/32", "192.168.0.0/24", "::1/128" ]
AllowedNetworks = []

# Password for get metrics, add as get param ?password=...
Password        = ""

# Allow set password to empty string
AllowEmptyPassword  = false



[Profiler]
Enable = false

# IP networks for allow to use profiler.
# Default - allow from all.
# Example:
# [ "1.2.3.4/32", "192.168.0.0/24", "::1/128" ]
AllowedNetworks = []
BindAddress = "localhost:31344"
Password        = ""
AllowEmptyPassword  = false
